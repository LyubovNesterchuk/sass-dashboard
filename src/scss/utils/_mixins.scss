@use "sass:map";
@use "sass:list";

@use "variables" as var;
@use "functions" as fn;

@mixin mq($bp: sm, $type: min, $is-retina: false) {
  @if map.has-key(var.$breakpoints, $bp) {
    $width: map.get(var.$breakpoints, $bp);

    @if $type == max {
      $width: $width - 0.02px;
    }

    @if $is-retina {
      @media only screen and (#{$type}-width: $width) and (-webkit-min-device-pixel-ratio: 2),
             only screen and (#{$type}-width: $width) and (min-resolution: 192dpi),
             only screen and (#{$type}-width: $width) and (min-resolution: 2dppx) {
        @content;
      }
    } @else {
      @media only screen and (#{$type}-width: $width) {
        @content;
      }
    }
  } @else {
    @error "The breakpoint #{$bp} is not defined in $breakpoints";
  }
}


@mixin frame($width, $height: $width, $is-circle: false) {
  width: $width;
  height: $height;

  @if $is-circle {
    border-radius: 50%;
    overflow: hidden;
  }

  img {
    object-fit: cover;
    object-position: center top;
  }
}


@mixin scroll-bar {
  &::-webkit-scrollbar {
    width: 14px;
  }

  &::-webkit-scrollbar-track {
    background-color: transparent;
    border-radius: 100%;
    
    &:hover {
      background-color: rgba(#fff, 0.3);
    }
  }

  &::-webkit-scrollbar-thumb {
    background-color: fn.get-color("light-secondary");
    background-clip: content-box;
    border: 5px solid transparent;
    border-radius: 100px;

    &:hover {
      background-color: fn.get-color("accent-primary");
    }
  }
}



@mixin ease($ease, $properties...) {
  @if map.has-key(var.$easings, $ease) {
    $ease-value: map.get(var.$easings, $ease);
    transition: $ease-value;
  } @else {
    @warn "The ease #{$ease} is not defined in $easings";
  }

  @if list.length($properties) > 0 {
    transition-property: $properties;
  }
}